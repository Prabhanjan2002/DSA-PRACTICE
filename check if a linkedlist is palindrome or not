#include<iostream>
using namespace std;


class Node{
    public:
    int data;
    Node* next;

    Node(int data)
    {
        this->data=data;
        this->next=NULL;   
     }
};

void insertattail(Node* &tail,int d)
{
    Node* temp=new Node(d);
    tail->next=temp;
    tail=temp;
}

void print (Node* &head)
{
    Node* temp=head;
    while(temp->next!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<temp->data<<endl;
}

Node* reverse(Node* head)
{
    Node* curr=head;
    Node* forward=NULL;
    Node* prev=NULL;
    while(curr!=NULL)
    {
        forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;
    }
    head=prev;
    return head;
}

Node* mid(Node* head)
{
    Node* slow=head;
    Node* fast=head->next;
    while(fast!=NULL)
    {
        fast=fast->next;
        if(fast!=NULL)
        fast=fast->next;
        slow=slow->next;
    }
    return slow;
}

int length(Node* &head)
{
    Node* temp=head;
    int count=0;
    while(temp!=NULL)
    {
       count++;
       temp=temp->next;
    }
    return count;
}

bool palindrome(Node* &head,Node* &middle)
{
    reverse(middle);
   Node* temp1=head;
   Node* temp2=middle;
   while(temp2!=NULL)
   {
     if(temp1->data!=temp2->data)
         return false;
     
        temp1=temp1->next;
        temp2=temp2->next;
     
   }
   return true;
}

int main()
{ 
    int n;
    cout<<"enter the size of list"<<endl;
    cin>>n;
    int arr[n];
    cout<<"enter the elements of list"<<endl;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    Node* head=new Node(arr[0]);
    Node* tail=head;
    for(int i=1;i<n;i++)
    {
        insertattail(tail,arr[i]);
    }
    cout<<"the list is"<<endl;
    print(head);


    Node* middle=mid(head);
    
    Node* temp=middle->next;
    middle->next=reverse(temp);
    middle=middle->next;
    

    if(palindrome(head,middle)==true)
    cout<<"list is palindrome"<<endl;
    else
    cout<<"not palindrome"<<endl;

   return 0;
}
