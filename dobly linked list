#include<iostream>
using namespace std;

class node{
   public:
   int data;
   node* prev;
   node* next;

   node(int d)
   {
      this->data=d;
      this->prev=NULL;
      this->next=NULL;
   }

   // ~node(){
   //    int value=this->data;
   //    //memory free
   //    if(this->next!=NULL){
   //       delete next;
   //       this->next=NULL;
   //    }
   //    //cout<<"memeory is free for node with data "<<value<<endl;
   // }

};


void print(node* head)
{
   node* temp=head;
   while(temp!=NULL){
      cout<<temp->data<<" ";
      temp=temp->next;
   }
   cout<<endl;
}

int getlength(node* &head)
{
   int len=1;
   node* temp=head;
   while(temp!=NULL){
      len++;
      temp=temp->next;
   }
   return len;
}

void insertathead(node* &head,node* &tail,int d)
{
   if(head==NULL)
   {
      node* temp=new node(d);
      head=temp;
      tail=temp;
   }
   else{
   node* temp=new node(d);
   temp->next=head;
   head->prev=temp;
   head=temp;
   }
}
void insertattail(node* &head,node* &tail,int d)
{
   if(tail==NULL)
   {
      node* temp=new node(d);
      tail=temp;
      head=temp;
   }
   else{
   node* temp=new node(d);
   tail->next=temp;
   temp->prev=tail;
   tail=temp;
   }
}
void insertatanyposition(node* &head,node* &tail,int position,int d)
{
   if(position==1)
   {
      insertathead(head,tail,d);
      return;
   }
   node* temp=head;
   int count=1;
   while(count<position-1)
   {
      temp=temp->next;
      count++;
   }
   if(temp->next==NULL)
   {
      insertattail(head,tail,d);
      return;
   }
   node* nodetoinsert=new node(d);
   nodetoinsert->next=temp->next;
   temp->next->prev=nodetoinsert;
   temp->next=nodetoinsert;
   nodetoinsert->prev=temp;
}
void deletenode(node* &head,node* &tail,int position)
{
   if(position==1)
   {
      node* temp=head;
      head=head->next;
      temp->next=NULL;
      delete temp;
   }
   else{
      node* curr=head;
      node* prev=NULL;
      int count=1;
      while(count < position)
      {
         prev=curr;
         curr=curr->next;
         count++;
      }
      if(position!=getlength(head))
      {
      prev->next=curr->next;
      curr->next=NULL;
      delete curr;
      }
      else{
      tail=tail->prev;
      prev->next=NULL;
      curr->next=NULL;
      delete curr;
      }
   }
}
int main()
{
//   node* node1=new node(10);
//   node* head=node1;
//   print(head);
//   cout<<getlength(head)<<endl;
node* head=NULL;
node* tail=NULL;
print(head);
insertathead(head,tail,11);
insertattail(head,tail,13);
insertattail(head,tail,14);
insertattail(head,tail,15);
insertattail(head,tail,16);
insertattail(head,tail,17);
insertattail(head,tail,18);
insertatanyposition(head,tail,2,10);
print(head);
cout<<head->data<<endl;
cout<<tail->data<<endl;
deletenode(head,tail,1);
 print(head);
 cout<<head->data<<endl;
cout<<tail->data<<endl;
deletenode(head,tail,5);
print(head);
cout<<head->data<<endl;
cout<<tail->data<<endl;
deletenode(head,tail,4);
print(head);
cout<<head->data<<endl;
cout<<tail->data<<endl;
deletenode(head,tail,3);
print(head);
cout<<head->data<<endl;
cout<<tail->data<<endl;
deletenode(head,tail,4);
print(head);
cout<<head->data<<endl;
cout<<tail->data<<endl;
  return 0;
}
